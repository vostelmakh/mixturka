// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: mixturka.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Mixturka_GetRecipes_FullMethodName = "/mixturka.Mixturka/GetRecipes"
	Mixturka_BrewPot_FullMethodName    = "/mixturka.Mixturka/BrewPot"
)

// MixturkaClient is the client API for Mixturka service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MixturkaClient interface {
	// GetRecipes retrieves a list of all recipes
	GetRecipes(ctx context.Context, in *GetRecipesRequest, opts ...grpc.CallOption) (*GetRecipesResponse, error)
	// BrewPot starts the brewing process with the specified ingredients.
	BrewPot(ctx context.Context, in *PotBrewRequest, opts ...grpc.CallOption) (*PotBrewResponse, error)
}

type mixturkaClient struct {
	cc grpc.ClientConnInterface
}

func NewMixturkaClient(cc grpc.ClientConnInterface) MixturkaClient {
	return &mixturkaClient{cc}
}

func (c *mixturkaClient) GetRecipes(ctx context.Context, in *GetRecipesRequest, opts ...grpc.CallOption) (*GetRecipesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecipesResponse)
	err := c.cc.Invoke(ctx, Mixturka_GetRecipes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixturkaClient) BrewPot(ctx context.Context, in *PotBrewRequest, opts ...grpc.CallOption) (*PotBrewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PotBrewResponse)
	err := c.cc.Invoke(ctx, Mixturka_BrewPot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MixturkaServer is the server API for Mixturka service.
// All implementations must embed UnimplementedMixturkaServer
// for forward compatibility.
type MixturkaServer interface {
	// GetRecipes retrieves a list of all recipes
	GetRecipes(context.Context, *GetRecipesRequest) (*GetRecipesResponse, error)
	// BrewPot starts the brewing process with the specified ingredients.
	BrewPot(context.Context, *PotBrewRequest) (*PotBrewResponse, error)
	mustEmbedUnimplementedMixturkaServer()
}

// UnimplementedMixturkaServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMixturkaServer struct{}

func (UnimplementedMixturkaServer) GetRecipes(context.Context, *GetRecipesRequest) (*GetRecipesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipes not implemented")
}
func (UnimplementedMixturkaServer) BrewPot(context.Context, *PotBrewRequest) (*PotBrewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrewPot not implemented")
}
func (UnimplementedMixturkaServer) mustEmbedUnimplementedMixturkaServer() {}
func (UnimplementedMixturkaServer) testEmbeddedByValue()                  {}

// UnsafeMixturkaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MixturkaServer will
// result in compilation errors.
type UnsafeMixturkaServer interface {
	mustEmbedUnimplementedMixturkaServer()
}

func RegisterMixturkaServer(s grpc.ServiceRegistrar, srv MixturkaServer) {
	// If the following call pancis, it indicates UnimplementedMixturkaServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Mixturka_ServiceDesc, srv)
}

func _Mixturka_GetRecipes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixturkaServer).GetRecipes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mixturka_GetRecipes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixturkaServer).GetRecipes(ctx, req.(*GetRecipesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixturka_BrewPot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PotBrewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixturkaServer).BrewPot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mixturka_BrewPot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixturkaServer).BrewPot(ctx, req.(*PotBrewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mixturka_ServiceDesc is the grpc.ServiceDesc for Mixturka service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mixturka_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mixturka.Mixturka",
	HandlerType: (*MixturkaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecipes",
			Handler:    _Mixturka_GetRecipes_Handler,
		},
		{
			MethodName: "BrewPot",
			Handler:    _Mixturka_BrewPot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixturka.proto",
}
